# 1 "src/aed2_carbon.F90"
!###############################################################################
!#                                                                             #
!# aed2_carbon.F90                                                             #
!#                                                                             #
!# Developed by :                                                              #
!#     AquaticEcoDynamics (AED) Group                                          #
!#     School of Earth & Environment                                           #
!# (C) The University of Western Australia                                     #
!#                                                                             #
!# Copyright by the AED-team @ UWA under the GNU Public License - www.gnu.org  #
!#                                                                             #
!#   -----------------------------------------------------------------------   #
!#                                                                             #
!# Created March 2012                                                          #
!#                                                                             #
!###############################################################################

# 1 "include/aed2.h" 1 
!###############################################################################
!#                                                                             #
!# aed2.h                                                                      #
!#                                                                             #
!# Developed by :                                                              #
!#     AquaticEcoDynamics (AED) Group                                          #
!#     School of Earth & Environment                                           #
!# (C) The University of Western Australia                                     #
!#                                                                             #
!# Copyright by the AED-team @ UWA under the GNU Public License - www.gnu.org  #
!#                                                                             #
!###############################################################################







!# aed_phytoplankton constants





!# for aed_geochemistry



!#define MISVAL -9999.












# 45
















# 19 "src/aed2_carbon.F90" 2 

!
MODULE aed2_carbon
!-------------------------------------------------------------------------------
! aed2_carbon --- carbon biogeochemical model
!
! The AED module carbon contains equations that describe exchange of
! soluable reactive carbon across the air/water interface and sediment flux.
!-------------------------------------------------------------------------------
   USE aed2_core

   USE aed2_util,  ONLY: aed2_gas_piston_velocity

   IMPLICIT NONE

   PRIVATE
!
   PUBLIC aed2_carbon_data_t
!
   TYPE,extends(aed2_model_data_t) :: aed2_carbon_data_t
!# Variable identifiers
      INTEGER  :: id_dic, id_pH, id_ch4, id_oxy
      INTEGER  :: id_Fsed_dic
      INTEGER  :: id_temp, id_salt
      INTEGER  :: id_wind
      INTEGER  :: id_ch4ox
      INTEGER  :: id_sed_dic
      INTEGER  :: id_atm_co2_exch

!# Model parameters
      real(8) :: Fsed_dic,Ksed_dic,theta_sed_dic
      real(8) :: Fsed_ch4,Ksed_ch4,theta_sed_ch4
      real(8) :: Rch4ox,Kch4ox,vTch4ox,atmco2,ionic
      LOGICAL  :: use_oxy,use_dic,use_sed_model
      LOGICAL  :: simDIC, simCH4

     CONTAINS
         PROCEDURE :: define            => aed2_define_carbon
         PROCEDURE :: calculate_surface => aed2_calculate_surface_carbon
         PROCEDURE :: calculate         => aed2_calculate_carbon
         PROCEDURE :: calculate_benthic => aed2_calculate_benthic_carbon
         PROCEDURE :: equilibrate       => aed2_equilibrate_carbon
!        PROCEDURE :: mobility          => aed2_mobility_carbon
!        PROCEDURE :: light_extinction  => aed2_light_extinction_carbon
!        PROCEDURE :: delete            => aed2_delete_carbon

   END TYPE


!===============================================================================
CONTAINS



!###############################################################################
SUBROUTINE aed2_define_carbon(data, namlst)
!-------------------------------------------------------------------------------
! Initialise the AED model
!
!  Here, the aed namelist is read and te variables exported
!  by the model are registered with AED2.
!-------------------------------------------------------------------------------
!ARGUMENTS
   CLASS (aed2_carbon_data_t),INTENT(inout) :: data
   INTEGER,INTENT(in) :: namlst
!
!LOCALS

   INTEGER  :: status

   real(8)          :: pH_initial=7.5
   real(8)          :: ionic = 0.0
   real(8)          :: dic_initial=4.5
   real(8)          :: Fsed_dic = 3.5
   real(8)          :: Ksed_dic = 30.0
   real(8)          :: theta_sed_dic = 1.0
   CHARACTER(len=64) :: Fsed_dic_variable=''
   real(8)          :: ch4_initial=4.5
   real(8)          :: Fsed_ch4 = 3.5
   real(8)          :: Ksed_ch4 = 30.0
   real(8)          :: theta_sed_ch4 = 1.0
   CHARACTER(len=64) :: Fsed_ch4_variable=''
   real(8)          :: Rch4ox = 0.01
   real(8)          :: Kch4ox = 0.01
   real(8)          :: vTch4ox= 1.05
!  real(8)          :: atmco2 = 367e-6
   real(8)          :: atmco2 = 367.
   CHARACTER(len=64) :: methane_reactant_variable=''


   real(8),PARAMETER :: secs_pr_day = 86400.
   NAMELIST /aed2_carbon/ dic_initial,pH_initial,ionic,Fsed_dic,Ksed_dic,theta_sed_dic,Fsed_dic_variable, &
                         ch4_initial,Fsed_ch4,Ksed_ch4,theta_sed_ch4,Fsed_ch4_variable, &
                         atmco2,Rch4ox,Kch4ox,vTch4ox,methane_reactant_variable

!-------------------------------------------------------------------------------
!BEGIN
! Read the namelist
   read(namlst,nml=aed2_carbon,iostat=status)
   IF (status /= 0) THEN
      print *,'Error reading namelist aed2_carbon'
      STOP
   ENDIF

! Store parameter values in our own derived type
! NB: all rates must be provided in values per day,
! and are converted here to values per second.
   data%Fsed_dic      = Fsed_dic/secs_pr_day
   data%Ksed_dic      = Ksed_dic
   data%theta_sed_dic = theta_sed_dic
   data%ionic         = ionic
   data%Fsed_ch4      = Fsed_ch4/secs_pr_day
   data%Ksed_ch4      = Ksed_ch4
   data%theta_sed_ch4 = theta_sed_ch4
   data%Rch4ox        = Rch4ox/secs_pr_day
   data%Kch4ox        = Kch4ox
   data%vTch4ox       = vTch4ox
   data%atmco2        = atmco2
   data%simDIC        = .false.
   data%simCH4        = .false.



! Register state variables
   IF (dic_initial>misval_) THEN
     data%id_dic = aed2_define_variable('dic','mmol/m**3','dissolved inorganic carbon',     &
                                      dic_initial,minimum=zero_)
     data%simDIC = .true.
     data%id_pH = aed2_define_variable('pH','-','pH',     &
                                      pH_initial,minimum=zero_)
   ENDIF

   IF (ch4_initial>misval_) THEN
     data%id_ch4 = aed2_define_variable('ch4','mmol/m**3','methane',    &
                                    ch4_initial,minimum=zero_)
     data%simCH4 = .true.
   ENDIF

!# Register external state variable dependencies
   data%use_oxy = methane_reactant_variable .NE. '' !This means oxygen module switched on
   IF (data%use_oxy) THEN
     data%id_oxy = aed2_locate_variable(methane_reactant_variable)
   ENDIF

   data%use_sed_model = Fsed_dic_variable .NE. ''
   IF (data%use_sed_model) &
       data%id_Fsed_dic = aed2_locate_global_sheet(Fsed_dic_variable)

!# Register diagnostic variables
   data%id_ch4ox = aed2_define_diag_variable('ch4ox','/d', 'methane oxidation rate')
   data%id_sed_dic = aed2_define_sheet_diag_variable('sed_dic','mmol/m**2/d',        &
                                                      'Filterable reactive carbon')

   data%id_atm_co2_exch = aed2_define_sheet_diag_variable('atm_co2_exch',            &
                             'mmol/m**2/d', 'CO2 exchange across atm/water interface')

!# Register environmental dependencies
   data%id_temp = aed2_locate_global('temperature')
   data%id_salt = aed2_locate_global('salinity')
   data%id_wind = aed2_locate_global_sheet('wind_speed')
END SUBROUTINE aed2_define_carbon
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


!###############################################################################
SUBROUTINE aed2_calculate_carbon(data,column,layer_idx)
!-------------------------------------------------------------------------------
! Right hand sides of aed2_carbon model
!-------------------------------------------------------------------------------
!ARGUMENTS
   CLASS (aed2_carbon_data_t),INTENT(in) :: data
   TYPE (aed2_column_t),INTENT(inout) :: column(:)
   INTEGER,INTENT(in) :: layer_idx
!
!LOCALS
   real(8) :: dic,ch4,oxy,temp
   real(8) :: ch4oxidation
!
!-------------------------------------------------------------------------------
!BEGIN

   IF(data%simDIC .AND. data%simCH4) THEN
! Retrieve current (local) state variable values.
      dic = column(data%id_dic)%cell(layer_idx)! carbon
      ch4 = column(data%id_ch4)%cell(layer_idx)! carbon

! Retrieve current dependent state variable values.
      IF (data%use_oxy) THEN ! & use_oxy
         oxy = column(data%id_oxy)%cell(layer_idx)! oxygen
      ELSE
         oxy = 0.0
      ENDIF

! Retrieve current environmental conditions.
      temp = column(data%id_temp)%cell(layer_idx) ! temperature

! Define some intermediate quantities units mmol C/m3/day
      ch4oxidation = aed2_carbon_fch4ox(data%use_oxy,data%Rch4ox,data%Kch4ox,data%vTch4ox,oxy,temp)

! Set temporal derivatives
      column(data%id_dic)%flux_pel(layer_idx) = column(data%id_dic)%flux_pel(layer_idx) + (ch4*ch4oxidation)
      column(data%id_ch4)%flux_pel(layer_idx) = column(data%id_ch4)%flux_pel(layer_idx) + (-ch4*ch4oxidation)

! If an externally maintained oxygen pool is present, take nitrification from it
      IF (data%use_oxy) then ! & use_oxy
         column(data%id_oxy)%flux_pel(layer_idx) = column(data%id_oxy)%flux_pel(layer_idx) + (-(32./12.)*ch4*ch4oxidation)
      ENDIF

! Export diagnostic variables
      column(data%id_ch4ox)%cell(layer_idx) =  ch4oxidation
   ENDIF

END SUBROUTINE aed2_calculate_carbon
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


!###############################################################################
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


!###############################################################################
SUBROUTINE aed2_calculate_surface_carbon(data,column,layer_idx)
!-------------------------------------------------------------------------------
! Air-sea exchange for the aed carbon model
!-------------------------------------------------------------------------------
!ARGUMENTS
   CLASS (aed2_carbon_data_t),INTENT(in) :: data
   TYPE (aed2_column_t),INTENT(inout) :: column(:)
   INTEGER,INTENT(in) :: layer_idx
!
!LOCALS
! Environment
   real(8) :: temp, salt, wind

! State
   real(8) :: dic,ph

! Temporary variables
   real(8) :: pCO2,FCO2
   real(8) :: Ko, KCO2
   real(8) :: Tabs,windHt

!-------------------------------------------------------------------------------
!BEGIN

   IF(.NOT.data%simDIC) RETURN


!Get dependent state variables from physical driver
   temp = column(data%id_temp)%cell(layer_idx)    ! Temperature (degrees Celsius)
   salt = column(data%id_salt)%cell(layer_idx)    ! Salinity (psu)
   wind = column(data%id_wind)%cell_sheet ! Wind speed at 10 m above surface (m/s)
   windHt = 10.

! Retrieve current (local) state variable values.
   dic = column(data%id_dic)%cell(layer_idx)! Concentration of carbon in surface layer
   ph = column(data%id_pH)%cell(layer_idx)! Concentration of carbon in surface layer

   kCO2 = aed2_gas_piston_velocity(windHt,wind,temp,salt)

! Solubility, Ko (mol/L/atm)
   Tabs = temp + 273.15
   Ko = -58.0931+90.5069*(100.0/Tabs) + 22.294*log(Tabs/100.0) &
          + 0.027766*salt - 0.025888*salt*(Tabs/100.0)
   Ko = Ko + 0.0050578*salt*(Tabs/100.0)*(Tabs/100.0)
   Ko = exp(Ko)

! pCO2 in surface water layer
   pCO2 = aed2_carbon_co2(data%ionic,temp,dic,ph) / Ko

! FCO2 = kCO2 * Ko * (pCO2 - PCO2a)
! pCO2a = 367e-6 (Keeling & Wharf, 1999)

!------ Yanti correction (20/5/2013) ----------------------------------------
! pCO2 is actually in uatm (=ppm)
! mmol/m2/s = m/s * mmol/L/atm * atm
   FCO2 = kCO2 * Ko * (pCO2 - data%atmco2)

! FCO2 = - kCO2 * Ko*1e6 * ((pCO2 * 1e-6) - data%atmco2) ! dCO2/dt
!----------------------------------------------------------------------------

! Transfer surface exchange value to AED2 (mmmol/m2) converted by driver.
   column(data%id_dic)%flux_atm = -FCO2

! Also store oxygen flux across the atm/water interface as diagnostic variable (mmmol/m2).
   column(data%id_atm_co2_exch)%cell_sheet = FCO2

END SUBROUTINE aed2_calculate_surface_carbon
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


!###############################################################################
SUBROUTINE aed2_calculate_benthic_carbon(data,column,layer_idx)
!-------------------------------------------------------------------------------
! Calculate pelagic bottom fluxes and benthic sink and source terms of AED carbon.
! Everything in units per surface area (not volume!) per time.
!-------------------------------------------------------------------------------
!ARGUMENTS
   CLASS (aed2_carbon_data_t),INTENT(in) :: data
   TYPE (aed2_column_t),INTENT(inout) :: column(:)
   INTEGER,INTENT(in) :: layer_idx
!
!LOCALS
! Environment
   real(8) :: temp

! State
   real(8) :: dic,oxy

! Temporary variables
   real(8) :: dic_flux, Fsed_dic

! Parameters
   real(8),PARAMETER :: secs_pr_day = 86400.

!-------------------------------------------------------------------------------
!BEGIN

   IF(.NOT.data%simDIC) RETURN


! Retrieve current environmental conditions for the bottom pelagic layer.
   temp = column(data%id_temp)%cell(layer_idx) ! local temperature

! Retrieve current (local) state variable values.
   dic = column(data%id_dic)%cell(layer_idx)! carbon

   IF ( data%use_sed_model ) THEN
      Fsed_dic = column(data%id_Fsed_dic)%cell_sheet
   ELSE
       Fsed_dic = data%Fsed_dic
   ENDIF

   IF (data%use_oxy) THEN
! Sediment flux dependent on oxygen and temperature
      oxy = column(data%id_oxy)%cell(layer_idx)
      dic_flux = Fsed_dic * data%Ksed_dic/(data%Ksed_dic+oxy) * (data%theta_sed_dic**(temp-20.0))
   ELSE
! Sediment flux dependent on temperature only.
      dic_flux = Fsed_dic * (data%theta_sed_dic**(temp-20.0))
   ENDIF

! TODO:
! (1) Get benthic sink and source terms (sccb?) for current environment
! (2) Get pelagic bttom fluxes (per surface area - division by layer height will be handled at a higher level)

! Set bottom fluxes for the pelagic (change per surface area per second)
! Transfer sediment flux value to AED2.
!_SET_BOTTOM_FLUX_(data%id_dic,dic_flux/secs_pr_day)
!_SET_SED_FLUX_(data%id_dic,dic_flux)
   column(data%id_dic)%flux_pel(layer_idx) = column(data%id_dic)%flux_pel(layer_idx) + (dic_flux)

! Set sink and source terms for the benthos (change per surface area per second)
! Note that this must include the fluxes to and from the pelagic.
!column(data%id_ben_dic)%flux_ben = column(data%id_ben_dic)%flux_ben + (-dic_flux/secs_pr_day)

! Also store sediment flux as diagnostic variable.
   column(data%id_sed_dic)%cell_sheet = dic_flux

END SUBROUTINE aed2_calculate_benthic_carbon
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


!###############################################################################
SUBROUTINE aed2_equilibrate_carbon(data,column,layer_idx)
!-------------------------------------------------------------------------------
! Update pH after kinetic transformations are applied
!-------------------------------------------------------------------------------
!ARGUMENTS
   CLASS (aed2_carbon_data_t),INTENT(in) :: data
   TYPE (aed2_column_t),INTENT(inout) :: column(:)
   INTEGER,INTENT(in) :: layer_idx
!
!LOCALS
! State
   real(8) :: dic, pH

!-------------------------------------------------------------------------------
!BEGIN
   IF(.NOT.data%simDIC) RETURN


! Retrieve current (local) state variable values.
!  dic = column(data%id_dic)%cell(layer_idx)! Concentration of carbon in surface layer
!   pH = column(data%id_pH)%cell(layer_idx)! Concentration of carbon in surface layer

!print*,"new pH = ",pH
!  column(data%id_pH)%cell(layer_idx) =  pH

END SUBROUTINE aed2_equilibrate_carbon
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


!###############################################################################
PURE real(8) FUNCTION aed2_carbon_fch4ox(use_oxy,Rch4ox,Kch4ox,vTch4ox,oxy,temp)
!-------------------------------------------------------------------------------
! Michaelis-Menten formulation for methane oxidation
!
! Here, the classical Michaelis-Menten formulation for nitrification
! is formulated.
!-------------------------------------------------------------------------------
!ARGUMENTS
   LOGICAL,INTENT(in)  :: use_oxy
   real(8),INTENT(in) :: Rch4ox,Kch4ox,vTch4ox,oxy,temp
!
!-------------------------------------------------------------------------------
!BEGIN
   IF (use_oxy) THEN
      aed2_carbon_fch4ox = Rch4ox * oxy/(Kch4ox+oxy) * (vTch4ox**(temp-20.0))
   ELSE
      aed2_carbon_fch4ox = Rch4ox * (vTch4ox**(temp-20.0))
   ENDIF

END FUNCTION aed2_carbon_fch4ox
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


!###############################################################################
PURE real(8) FUNCTION aed2_carbon_co2(ionic, temp, dic, pH)
!-------------------------------------------------------------------------------
! CO2 concentration of DIC at fixed T
!-------------------------------------------------------------------------------
!ARGUMENTS
   real(8), INTENT(IN) :: ionic, dic, temp, pH
!
!LOCALS
! Temporary variables
   real(8) :: K_h, Kw, Ka1, Ka2, i_f
   real(8) :: H, CO2, HCO3, CO3, TA
!-------------------------------------------------------------------------------
!BEGIN

! Acidity constants temperature dependence

! pKh =  -0.000075324675x2 + 0.016279653680x + 1.110424242424
! pKa1 = 0.000142121212x2 - 0.012648181818x + 6.577539393939
! pKa2 =  0.000113679654x2 - 0.014687186147x + 10.625769696970
! pKw =   0.000201991342x2 - 0.043419653680x + 14.949709090909

   K_h = -0.000075324675*temp*temp + 0.016279653680*temp + 1.110424242424
   Ka1 = 0.000142121212*temp*temp - 0.012648181818*temp + 6.577539393939
   Ka2 = 0.000113679654*temp*temp - 0.014687186147*temp + 10.625769696970
   Kw = 0.000201991342*temp*temp - 0.043419653680*temp + 14.949709090909


! Ionic strength dependence

! 1st calculate function f
   i_f = (((SQRT(ionic)) / (1+SQRT(ionic))) -0.20*ionic) * &
                       (298.0/(temp+273.))**0.666667

! pKh = pKh(0) + bI
! b = 0.105 (Butler, 1982)
   K_h = K_h + 0.105*ionic

! pKw = pKw(0) - f
   Kw = Kw - i_f

! pKa1 = pKa1(0) - f - bI
   Ka1 = Ka1 - i_f - 0.105*ionic

!pKa2 = pKa2(0) - 2f
   Ka2 = Ka2 + 2.0*i_f

! Convert from pK etc to Kh, Kw, Ka1, Ka2
   K_h  = 10.**(-K_h)
   Ka1 = 10.**(-Ka1)
   Ka2 = 10.**(-Ka2)
   Kw  = 10.**(-Kw)


! Calculate the speciation to know the molar mass of DIC                                                             !
   H    = 10.**(-pH)
   CO3  = (Ka1*Ka2)/(H*H + Ka1*H + Ka1*Ka2)
   HCO3 = (Ka1*H)/(H*H + Ka1*H + Ka1*Ka2)
   CO2  = (H*H)/(H*H + Ka1*H + Ka1*Ka2)


! and update speciation (mol C/L)
   CO3  = dic*CO3
   HCO3 = dic*HCO3
   CO2  = dic*CO2

! calculate TA for the previous timestep
   TA = dic * (Ka1*H + 2.0*Ka1*Ka2) / (H*H + Ka1*H + Ka1*Ka2)
   TA = TA + (Kw/H) - H

   aed2_carbon_co2 = CO2

END FUNCTION aed2_carbon_co2
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++





END MODULE aed2_carbon
