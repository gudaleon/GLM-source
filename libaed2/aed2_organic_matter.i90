# 1 "src/aed2_organic_matter.F90"
!###############################################################################
!#                                                                             #
!# aed2_organic_matter.F90                                                     #
!#                                                                             #
!# Developed by :                                                              #
!#     AquaticEcoDynamics (AED) Group                                          #
!#     School of Earth & Environment                                           #
!# (C) The University of Western Australia                                     #
!#                                                                             #
!# Copyright by the AED-team @ UWA under the GNU Public License - www.gnu.org  #
!#                                                                             #
!#   -----------------------------------------------------------------------   #
!#                                                                             #
!# Created 6 June 2011                                                         #
!#                                                                             #
!###############################################################################

# 1 "include/aed2.h" 1 
!###############################################################################
!#                                                                             #
!# aed2.h                                                                      #
!#                                                                             #
!# Developed by :                                                              #
!#     AquaticEcoDynamics (AED) Group                                          #
!#     School of Earth & Environment                                           #
!# (C) The University of Western Australia                                     #
!#                                                                             #
!# Copyright by the AED-team @ UWA under the GNU Public License - www.gnu.org  #
!#                                                                             #
!###############################################################################







!# aed_phytoplankton constants





!# for aed_geochemistry



!#define MISVAL -9999.












# 45
















# 19 "src/aed2_organic_matter.F90" 2 

MODULE aed2_organic_matter
!-------------------------------------------------------------------------------
! aed2_organic_matter --- organic matter biogeochemical model
!
! Organic Matter module contains equations for mineralisation
! of particulate and dissolved organic matter.
! In future to include adsorption/desorption to suspended solids.
!-------------------------------------------------------------------------------
   USE aed2_core

   IMPLICIT NONE

   PRIVATE  ! By default make everything private
!
   PUBLIC aed2_organic_matter_data_t
!
   TYPE,extends(aed2_model_data_t) :: aed2_organic_matter_data_t
!# Variable identifiers
      INTEGER  :: id_pon,id_don ! particulate and dissolved organic nitrogen
      INTEGER  :: id_pop,id_dop ! particulate and dissolved organic phosphorus
      INTEGER  :: id_poc,id_doc ! particulate and dissolved organic carbon
      INTEGER  :: id_oxy,id_amm,id_frp,id_dic
      INTEGER  :: id_Fsed_pon, id_Fsed_don ! sed. rate organic nitrogen
      INTEGER  :: id_Fsed_pop, id_Fsed_dop ! sed. rate organic phosphorus
      INTEGER  :: id_Fsed_poc, id_Fsed_doc ! sed. rate organic carbon
      INTEGER  :: id_Psed_poc, id_Psed_pon, id_Psed_pop ! sedimentation rates
      INTEGER  :: id_temp
      INTEGER  :: id_pon_miner, id_don_miner
      INTEGER  :: id_pop_miner, id_dop_miner
      INTEGER  :: id_poc_miner, id_doc_miner
      INTEGER  :: id_sed_pon, id_sed_don
      INTEGER  :: id_sed_pop, id_sed_dop
      INTEGER  :: id_sed_poc, id_sed_doc
      INTEGER  :: id_bod

!# Model parameters
      real(8) :: w_pon,Rpon_miner,Rdon_miner,Fsed_pon,Fsed_don, &
                          Kpon_miner, Kdon_miner, Ksed_don, &
                          theta_pon_miner, theta_don_miner, theta_sed_don
      real(8) :: w_pop,Rpop_miner,Rdop_miner,Fsed_pop,Fsed_dop, &
                          Kpop_miner, Kdop_miner, Ksed_dop, &
                          theta_pop_miner, theta_dop_miner, theta_sed_dop
      real(8) :: w_poc,Rpoc_miner,Rdoc_miner,Fsed_poc,Fsed_doc, &
                          Kpoc_miner, Kdoc_miner, Ksed_doc, &
                          theta_poc_miner, theta_doc_miner, theta_sed_doc, &
                          KeDOM, KePOM
      LOGICAL  :: use_oxy, use_amm, use_frp, use_dic, use_sed_model, use_sedmtn_model

     CONTAINS
         PROCEDURE :: define            => aed2_define_organic_matter
         PROCEDURE :: calculate         => aed2_calculate_organic_matter
         PROCEDURE :: calculate_benthic => aed2_calculate_benthic_organic_matter
!        PROCEDURE :: mobility          => aed2_mobility_organic_matter
         PROCEDURE :: light_extinction  => aed2_light_extinction_organic_matter
!        PROCEDURE :: delete            => aed2_delete_organic_matter

   END TYPE


!===============================================================================
CONTAINS


!###############################################################################
SUBROUTINE aed2_define_organic_matter(data, namlst)
!-------------------------------------------------------------------------------
! Initialise the AED model
!
!  Here, the aed namelist is read and te variables exported
!  by the model are registered with AED2.
!-------------------------------------------------------------------------------
!ARGUMENTS
   INTEGER,INTENT(in)                              :: namlst
   CLASS (aed2_organic_matter_data_t),INTENT(inout) :: data
!
!LOCALS
   INTEGER  :: status

   real(8)                  :: pon_initial = 4.5
   real(8)                  :: don_initial = 4.5
   real(8)                  :: w_pon       = 0.0
   real(8)                  :: Rpon_miner  = 0.01
   real(8)                  :: Rdon_miner  = 0.01
   real(8)                  :: Fsed_pon    =  0.0
   real(8)                  :: Fsed_don    = 30.0
   real(8)                  :: Kpon_miner  = 30.0
   real(8)                  :: Kdon_miner  = 30.0
   real(8)                  :: Ksed_don    = 4.5
   real(8)                  :: theta_pon_miner = 1.0
   real(8)                  :: theta_don_miner = 1.0
   real(8)                  :: theta_sed_don   = 1.0
   CHARACTER(len=64)         :: don_miner_product_variable=''
   CHARACTER(len=64)         :: Fsed_pon_variable=''
   CHARACTER(len=64)         :: Fsed_don_variable=''

   real(8)                  :: pop_initial = 4.5
   real(8)                  :: dop_initial = 4.5
   real(8)                  :: w_pop       = 0.0
   real(8)                  :: Rpop_miner  = 0.01
   real(8)                  :: Rdop_miner  = 0.01
   real(8)                  :: Fsed_pop    =  0.0
   real(8)                  :: Fsed_dop    = 30.0
   real(8)                  :: Kpop_miner  = 30.0
   real(8)                  :: Kdop_miner  = 30.0
   real(8)                  :: Ksed_dop    = 4.5
   real(8)                  :: theta_pop_miner = 1.0
   real(8)                  :: theta_dop_miner = 1.0
   real(8)                  :: theta_sed_dop   = 1.0
   CHARACTER(len=64)         :: dop_miner_product_variable=''
   CHARACTER(len=64)         :: Fsed_pop_variable=''
   CHARACTER(len=64)         :: Fsed_dop_variable=''

   real(8)                  :: poc_initial = 4.5
   real(8)                  :: doc_initial = 4.5
   real(8)                  :: w_poc       = 0.0
   real(8)                  :: Rpoc_miner  = 0.01
   real(8)                  :: Rdoc_miner  = 0.01
   real(8)                  :: Fsed_poc    =  0.0
   real(8)                  :: Fsed_doc    = 30.0
   real(8)                  :: Kpoc_miner  = 30.0
   real(8)                  :: Kdoc_miner  = 30.0
   real(8)                  :: Ksed_doc    = 4.5
   real(8)                  :: theta_poc_miner = 1.0
   real(8)                  :: theta_doc_miner = 1.0
   real(8)                  :: theta_sed_doc   = 1.0
   real(8)                  :: KeDOM = 0.01
   real(8)                  :: KePOM = 0.01
   CHARACTER(len=64)         :: doc_miner_product_variable=''
   CHARACTER(len=64)         :: doc_miner_reactant_variable=''
   CHARACTER(len=64)         :: Fsed_poc_variable=''
   CHARACTER(len=64)         :: Fsed_doc_variable=''

   CHARACTER(len=64)         :: Psed_poc_variable=''
   CHARACTER(len=64)         :: Psed_pon_variable=''
   CHARACTER(len=64)         :: Psed_pop_variable=''



   real(8),PARAMETER :: secs_pr_day = 86400.
   NAMELIST /aed2_organic_matter/ &
             pon_initial, don_initial, w_pon, Rpon_miner, Rdon_miner, Fsed_pon, Fsed_don, &
             Kpon_miner, Kdon_miner, Ksed_don,                &
             theta_pon_miner, theta_don_miner, theta_sed_don, &
             don_miner_product_variable,                      &
             Fsed_pon_variable, Fsed_don_variable,            &
             pop_initial, dop_initial, w_pop, Rpop_miner, Rdop_miner, Fsed_pop, Fsed_dop, &
             Kpop_miner, Kdop_miner, Ksed_dop,                &
             theta_pop_miner, theta_dop_miner, theta_sed_dop, &
             dop_miner_product_variable,                      &
             Fsed_pop_variable, Fsed_dop_variable,            &
             poc_initial, doc_initial, w_poc, Rpoc_miner, Rdoc_miner, Fsed_poc, Fsed_doc, &
             Kpoc_miner, Kdoc_miner, Ksed_doc,                &
             theta_poc_miner, theta_doc_miner, theta_sed_doc, KeDOM, KePOM, &
             doc_miner_reactant_variable, doc_miner_product_variable, &
             Fsed_poc_variable, Fsed_doc_variable, &
             Psed_poc_variable, Psed_pon_variable, Psed_pop_variable

!-------------------------------------------------------------------------------
!BEGIN
! Read the namelist
   read(namlst,nml=aed2_organic_matter,iostat=status)
   IF (status /= 0) STOP 'Error reading namelist aed2_organic_matter'

! Store parameter values in our own derived type
! NB: all rates must be provided in values per day,
! and are converted here to values per second.
   data%w_pon       = w_pon/secs_pr_day
   data%Rpon_miner  = Rpon_miner/secs_pr_day
   data%Rdon_miner  = Rdon_miner/secs_pr_day
! data%Fsed_pon    = Fsed_pon/secs_pr_day
   data%Fsed_pon    = 0.0
   data%Fsed_don    = Fsed_don/secs_pr_day
   data%Kpon_miner  = Kpon_miner
   data%Kdon_miner  = Kdon_miner
   data%Ksed_don  = Ksed_don
   data%theta_pon_miner = theta_pon_miner
   data%theta_don_miner = theta_don_miner
   data%theta_sed_don = theta_sed_don

   data%w_pop       = w_pop/secs_pr_day
   data%Rpop_miner  = Rpop_miner/secs_pr_day
   data%Rdop_miner  = Rdop_miner/secs_pr_day
! data%Fsed_pop    = Fsed_pop/secs_pr_day
   data%Fsed_pop    = 0.0
   data%Fsed_dop    = Fsed_dop/secs_pr_day
   data%Kpop_miner  = Kpop_miner
   data%Kdop_miner  = Kdop_miner
   data%Ksed_dop  = Ksed_dop
   data%theta_pop_miner = theta_pop_miner
   data%theta_dop_miner = theta_dop_miner
   data%theta_sed_dop = theta_sed_dop

   data%w_poc       = w_poc/secs_pr_day
   data%Rpoc_miner  = Rpoc_miner/secs_pr_day
   data%Rdoc_miner  = Rdoc_miner/secs_pr_day
! data%Fsed_poc    = Fsed_poc/secs_pr_day
   data%Fsed_poc    = 0.0
   data%Fsed_doc    = Fsed_doc/secs_pr_day
   data%Kpoc_miner  = Kpoc_miner
   data%Kdoc_miner  = Kdoc_miner
   data%Ksed_doc  = Ksed_doc
   data%theta_poc_miner = theta_poc_miner
   data%theta_doc_miner = theta_doc_miner
   data%theta_sed_doc = theta_sed_doc
   data%KeDOM       = KeDOM
   data%KePOM       = KePOM

! Register state variables
   data%id_don = aed2_define_variable('don','mmol/m**3','dissolved organic nitrogen',     &
                                    don_initial,minimum=zero_)

   data%id_pon = aed2_define_variable('pon','mmol/m**3','particulate organic nitrogen',   &
                                    pon_initial,minimum=zero_,mobility=data%w_pon)

   data%id_dop = aed2_define_variable('dop','mmol/m**3','dissolved organic phosphorus',   &
                                    dop_initial,minimum=zero_)
   data%id_pop = aed2_define_variable('pop','mmol/m**3','particulate organic phosphorus', &
                                    pop_initial,minimum=zero_,mobility=data%w_pop)

   data%id_doc = aed2_define_variable('doc','mmol/m**3','dissolved organic carbon',       &
                                    doc_initial,minimum=zero_)
   data%id_poc = aed2_define_variable('poc','mmol/m**3','particulate organic carbon',     &
                                    poc_initial,minimum=zero_,mobility=data%w_poc)

! Register external state variable dependencies (carbon)
   data%use_oxy = doc_miner_reactant_variable .NE. '' !This means oxygen module switched on
   IF (data%use_oxy) THEN
     data%id_oxy = aed2_locate_variable(doc_miner_reactant_variable)
   ENDIF

   data%use_dic = doc_miner_product_variable .NE. '' !This means carbon module switched on
   IF (data%use_dic) THEN
     data%id_dic = aed2_locate_variable(doc_miner_product_variable)
   ENDIF

! Register external state variable dependencies (nitrogen)
   data%use_amm = don_miner_product_variable .NE. '' !This means nitrogen module switched on
   IF (data%use_amm) THEN
     data%id_amm = aed2_locate_variable(don_miner_product_variable)
   ENDIF

! Register external state variable dependencies (phosphorous)
   data%use_frp = dop_miner_product_variable .NE. '' !This means phosphorus module switched on
   IF (data%use_frp) THEN
     data%id_frp = aed2_locate_variable(dop_miner_product_variable)
   ENDIF

   data%use_sed_model = Fsed_pon_variable .NE. ''
   IF (data%use_sed_model) THEN
     data%id_Fsed_pon = aed2_locate_global_sheet(Fsed_pon_variable)
     data%id_Fsed_don = aed2_locate_global_sheet(Fsed_don_variable)
     data%id_Fsed_pop = aed2_locate_global_sheet(Fsed_pop_variable)
     data%id_Fsed_dop = aed2_locate_global_sheet(Fsed_dop_variable)
     data%id_Fsed_poc = aed2_locate_global_sheet(Fsed_poc_variable)
     data%id_Fsed_doc = aed2_locate_global_sheet(Fsed_doc_variable)
   ENDIF

   data%use_sedmtn_model = Psed_poc_variable .NE. ''
   IF (data%use_sedmtn_model) THEN
     data%id_Psed_poc = aed2_locate_global_sheet(Psed_poc_variable)
     data%id_Psed_pon = aed2_locate_global_sheet(Psed_pon_variable)
     data%id_Psed_pop = aed2_locate_global_sheet(Psed_pop_variable)
   ENDIF

! Register diagnostic variables
   data%id_pon_miner = aed2_define_diag_variable('pon_miner','mmol/m**3/d',  'PON mineralisation')
   data%id_don_miner = aed2_define_diag_variable('don_miner','mmol/m**3/d',  'DON mineralisation')
   data%id_sed_pon = aed2_define_sheet_diag_variable('sed_pon','mmol/m**2/d',  'PON sediment flux')
   data%id_sed_don = aed2_define_sheet_diag_variable('sed_don','mmol/m**2/d',  'DON sediment flux')

   data%id_pop_miner = aed2_define_diag_variable('pop_miner','mmol/m**3/d',  'POP mineralisation')
   data%id_dop_miner = aed2_define_diag_variable('dop_miner','mmol/m**3/d',  'DOP mineralisation')
   data%id_sed_pop = aed2_define_sheet_diag_variable('sed_pop','mmol/m**2/d',  'POP sediment flux')
   data%id_sed_dop = aed2_define_sheet_diag_variable('sed_dop','mmol/m**2/d',  'DOP sediment flux')

   data%id_poc_miner = aed2_define_diag_variable('poc_miner','mmol/m**3/d',  'POC mineralisation')
   data%id_doc_miner = aed2_define_diag_variable('doc_miner','mmol/m**3/d',  'DOC mineralisation')
   data%id_sed_poc = aed2_define_sheet_diag_variable('sed_poc','mmol/m**2/d',  'POC sediment flux')
   data%id_sed_doc = aed2_define_sheet_diag_variable('sed_doc','mmol/m**2/d',  'DOC sediment flux')

   data%id_bod = aed2_define_diag_variable('BOD','mmol/m**3',  'Biochemical Oxygen Demand (BOD)')

! Register environmental dependencies
   data%id_temp = aed2_locate_global('temperature')
END SUBROUTINE aed2_define_organic_matter
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


!###############################################################################
SUBROUTINE aed2_calculate_organic_matter(data,column,layer_idx)
!-------------------------------------------------------------------------------
! Right hand sides of aed2_organic_matter model
!-------------------------------------------------------------------------------
!ARGUMENTS
   CLASS (aed2_organic_matter_data_t),INTENT(in) :: data
   TYPE (aed2_column_t),INTENT(inout) :: column(:)
   INTEGER,INTENT(in) :: layer_idx
!
!LOCALS
   real(8)                   :: pon,don,amm,oxy,temp !State variables
   real(8)                   :: pon_mineralisation, don_mineralisation
   real(8)                   :: pop,dop,frp !State variables
   real(8)                   :: pop_mineralisation, dop_mineralisation
   real(8)                   :: poc,doc,dic !State variables
   real(8)                   :: poc_mineralisation, doc_mineralisation
   real(8), parameter        :: secs_pr_day = 86400.
! real(8), parameter        :: Yoxy_don_miner = 6.625 !ratio of oxygen to nitrogen utilised during don mineralisation
! real(8), parameter        :: Yoxy_dop_miner = 6.625 !ratio of oxygen to phosphoros utilised during dop mineralisation
   real(8), parameter        :: Yoxy_doc_miner = 32./12. !ratio of oxygen to carbon utilised during doc mineralisation

!-----------------------------------------------------------------------
!BEGIN
!CALL log_message('model aed2_organic_matter enter do loop successfully.')

! Retrieve current (local) state variable values.
   pon = column(data%id_pon)%cell(layer_idx)! particulate organic nitrogen
   don = column(data%id_don)%cell(layer_idx)! dissolved organic nitrogen
   pop = column(data%id_pop)%cell(layer_idx)! particulate organic phosphorus
   dop = column(data%id_dop)%cell(layer_idx)! dissolved organic phosphorus
   poc = column(data%id_poc)%cell(layer_idx)! particulate organic carbon
   doc = column(data%id_doc)%cell(layer_idx)! dissolved organic carbon


   IF (data%use_oxy) THEN ! & use_oxy
      oxy = column(data%id_oxy)%cell(layer_idx)! oxygen
   ELSE
      oxy = 0.0
   ENDIF
   IF (data%use_dic) THEN ! & use_amm
      dic = column(data%id_dic)%cell(layer_idx)! disolved inorganic carbon
   ELSE
      dic = 0.0
   ENDIF
   IF (data%use_amm) THEN ! & use_amm
      amm = column(data%id_amm)%cell(layer_idx)! ammonium
   ELSE
      amm = 0.0
   ENDIF
   IF (data%use_frp) THEN ! & use_frp
      frp = column(data%id_frp)%cell(layer_idx)! phosphate
   ELSE
      frp = 0.0
   ENDIF

! Retrieve current environmental conditions.
   temp = column(data%id_temp)%cell(layer_idx) ! temperature

! Define some intermediate quantities units mmol N/m3/day
   pon_mineralisation = fpon_miner(data%use_oxy,data%Rpon_miner,data%Kpon_miner,data%theta_pon_miner,oxy,temp)
   don_mineralisation = fdon_miner(data%use_oxy,data%Rdon_miner,data%Kdon_miner,data%theta_don_miner,oxy,temp)
   pop_mineralisation = fpop_miner(data%use_oxy,data%Rpop_miner,data%Kpop_miner,data%theta_pop_miner,oxy,temp)
   dop_mineralisation = fdop_miner(data%use_oxy,data%Rdop_miner,data%Kdop_miner,data%theta_dop_miner,oxy,temp)
   poc_mineralisation = fpoc_miner(data%use_oxy,data%Rpoc_miner,data%Kpoc_miner,data%theta_poc_miner,oxy,temp)
   doc_mineralisation = fdoc_miner(data%use_oxy,data%Rdoc_miner,data%Kdoc_miner,data%theta_doc_miner,oxy,temp)

! Set temporal derivatives
   column(data%id_pon)%flux_pel(layer_idx) = column(data%id_pon)%flux_pel(layer_idx) + (-pon*pon_mineralisation)
   column(data%id_don)%flux_pel(layer_idx) = column(data%id_don)%flux_pel(layer_idx) + (pon*pon_mineralisation-don*don_mineralisation)
   column(data%id_pop)%flux_pel(layer_idx) = column(data%id_pop)%flux_pel(layer_idx) + (-pop*pop_mineralisation)
   column(data%id_dop)%flux_pel(layer_idx) = column(data%id_dop)%flux_pel(layer_idx) + (pop*pop_mineralisation-dop*dop_mineralisation)
   column(data%id_poc)%flux_pel(layer_idx) = column(data%id_poc)%flux_pel(layer_idx) + (-poc*poc_mineralisation)
   column(data%id_doc)%flux_pel(layer_idx) = column(data%id_doc)%flux_pel(layer_idx) + (poc*poc_mineralisation-doc*doc_mineralisation)

! If an externally maintained oxygen pool is present, take mineralisation from it
   IF (data%use_oxy) THEN
      column(data%id_oxy)%flux_pel(layer_idx) = column(data%id_oxy)%flux_pel(layer_idx) + (-Yoxy_doc_miner*doc*doc_mineralisation)
   ENDIF
   if (data%use_dic) THEN
      column(data%id_dic)%flux_pel(layer_idx) = column(data%id_dic)%flux_pel(layer_idx) + (doc*doc_mineralisation)
   ENDIF
   IF (data%use_amm) THEN
      column(data%id_amm)%flux_pel(layer_idx) = column(data%id_amm)%flux_pel(layer_idx) + (don*don_mineralisation)
   ENDIF
   IF (data%use_frp) THEN
      column(data%id_frp)%flux_pel(layer_idx) = column(data%id_frp)%flux_pel(layer_idx) + (dop*dop_mineralisation)
   ENDIF

! Export diagnostic variables
   column(data%id_pon_miner)%cell(layer_idx) = pon_mineralisation
   column(data%id_don_miner)%cell(layer_idx) = don_mineralisation
   column(data%id_pop_miner)%cell(layer_idx) = pop_mineralisation
   column(data%id_dop_miner)%cell(layer_idx) = dop_mineralisation
   column(data%id_poc_miner)%cell(layer_idx) = poc_mineralisation
   column(data%id_doc_miner)%cell(layer_idx) = doc_mineralisation

   column(data%id_bod)%cell(layer_idx) = poc+doc


END SUBROUTINE aed2_calculate_organic_matter
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


!###############################################################################
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


!###############################################################################
SUBROUTINE aed2_calculate_benthic_organic_matter(data,column,layer_idx)
!-------------------------------------------------------------------------------
! Calculate pelagic bottom fluxes and benthic sink and source terms of AED nitrogen.
! Everything in units per surface area (not volume!) per time.
!-------------------------------------------------------------------------------
!ARGUMENTS
   CLASS (aed2_organic_matter_data_t),INTENT(in) :: data
   TYPE (aed2_column_t),INTENT(inout) :: column(:)
   INTEGER,INTENT(in) :: layer_idx
!
!LOCALS
! Environment
   real(8) :: temp !, layer_ht

! State
   real(8) :: pon,don
   real(8) :: pop,dop
   real(8) :: poc,doc

! Temporary variables
   real(8) :: pon_flux,don_flux
   real(8) :: pop_flux,dop_flux
   real(8) :: poc_flux,doc_flux

   real(8) :: Fsed_pon,Fsed_don
   real(8) :: Fsed_pop,Fsed_dop
   real(8) :: Fsed_poc,Fsed_doc
   real(8) :: Psed_poc, Psed_pon, Psed_pop

! Parameters
   real(8),PARAMETER :: secs_pr_day = 86400.

!-------------------------------------------------------------------------------
!BEGIN


! Retrieve current environmental conditions for the bottom pelagic layer.
   temp = column(data%id_temp)%cell(layer_idx) ! local temperature

! Retrieve current (local) state variable values.
   pon = column(data%id_pon)%cell(layer_idx)! particulate organic matter
   don = column(data%id_don)%cell(layer_idx)! particulate organic matter
   pop = column(data%id_pop)%cell(layer_idx)! particulate organic matter
   dop = column(data%id_dop)%cell(layer_idx)! particulate organic matter
   poc = column(data%id_poc)%cell(layer_idx)! particulate organic matter
   doc = column(data%id_doc)%cell(layer_idx)! particulate organic matter

   IF (data%use_sed_model) THEN
      Fsed_pon = column(data%id_Fsed_pon)%cell_sheet
      Fsed_don = column(data%id_Fsed_don)%cell_sheet
      Fsed_pop = column(data%id_Fsed_pop)%cell_sheet
      Fsed_dop = column(data%id_Fsed_dop)%cell_sheet
      Fsed_poc = column(data%id_Fsed_poc)%cell_sheet
      Fsed_doc = column(data%id_Fsed_doc)%cell_sheet
   ELSE
      Fsed_pon = data%Fsed_pon
      Fsed_don = data%Fsed_don * data%Ksed_don/(data%Ksed_don+don) * (data%theta_sed_don**(temp-20.0))
      Fsed_pop = data%Fsed_pop
      Fsed_dop = data%Fsed_dop * data%Ksed_dop/(data%Ksed_dop+dop) * (data%theta_sed_dop**(temp-20.0))
      Fsed_poc = data%Fsed_poc
      Fsed_doc = data%Fsed_doc * data%Ksed_doc/(data%Ksed_doc+doc) * (data%theta_sed_doc**(temp-20.0))
   ENDIF

! Calculate sedimentation flux (mmmol/m2/s) loss from benthos.
   IF (data%use_sedmtn_model) THEN
       Psed_poc = data%w_poc * max(zero_,poc)
       Psed_pon = data%w_pon * max(zero_,pon)
       Psed_pop = data%w_pop * max(zero_,pop)
   ELSE
       Psed_poc = zero_
       Psed_pon = zero_
       Psed_pop = zero_
   ENDIF

   pon_flux = Fsed_pon + Psed_pon
   don_flux = Fsed_don
   pop_flux = Fsed_pop + Psed_pop
   dop_flux = Fsed_dop
   poc_flux = Fsed_poc + Psed_poc
   doc_flux = Fsed_doc

! Set bottom fluxes for the pelagic (change per surface area per second)
! Transfer sediment flux value to AED2.
   column(data%id_pon)%flux_pel(layer_idx) = column(data%id_pon)%flux_pel(layer_idx) + (pon_flux)
   column(data%id_don)%flux_pel(layer_idx) = column(data%id_don)%flux_pel(layer_idx) + (don_flux)
   column(data%id_pop)%flux_pel(layer_idx) = column(data%id_pop)%flux_pel(layer_idx) + (pop_flux)
   column(data%id_dop)%flux_pel(layer_idx) = column(data%id_dop)%flux_pel(layer_idx) + (dop_flux)
   column(data%id_poc)%flux_pel(layer_idx) = column(data%id_poc)%flux_pel(layer_idx) + (poc_flux)
   column(data%id_doc)%flux_pel(layer_idx) = column(data%id_doc)%flux_pel(layer_idx) + (doc_flux)


! Set sedimentation flux (mmmol/m2) as calculated by organic matter.
   IF (data%use_sedmtn_model) THEN
      column(data%id_Psed_poc)%cell_sheet = Psed_poc
      column(data%id_Psed_pon)%cell_sheet = Psed_pon
      column(data%id_Psed_pop)%cell_sheet = Psed_pop
   ENDIF


! Set sink and source terms for the benthos (change per surface area per second)
! Note that this must include the fluxes to and from the pelagic.
!column(data%id_ben_amm)%flux_ben = column(data%id_ben_amm)%flux_ben + (-amm_flux/secs_pr_day)

! Also store sediment flux as diagnostic variable.
   column(data%id_sed_pon)%cell_sheet = -pon_flux
   column(data%id_sed_don)%cell_sheet = -don_flux
   column(data%id_sed_pop)%cell_sheet = -pop_flux
   column(data%id_sed_dop)%cell_sheet = -dop_flux
   column(data%id_sed_poc)%cell_sheet = -poc_flux
   column(data%id_sed_doc)%cell_sheet = -doc_flux


END SUBROUTINE aed2_calculate_benthic_organic_matter
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


!###############################################################################
SUBROUTINE aed2_light_extinction_organic_matter(data,column,layer_idx,extinction)
!-------------------------------------------------------------------------------
! Get the light extinction coefficient due to biogeochemical variables
!-------------------------------------------------------------------------------
!ARGUMENTS
   CLASS (aed2_organic_matter_data_t),INTENT(in) :: data
   TYPE (aed2_column_t),INTENT(inout) :: column(:)
   INTEGER,INTENT(in) :: layer_idx
   real(8),INTENT(inout) :: extinction
!
!LOCALS
   real(8) :: doc,poc
!
!-------------------------------------------------------------------------------
!BEGIN

! Retrieve current (local) state variable values.
   doc = column(data%id_doc)%cell(layer_idx)
   poc = column(data%id_poc)%cell(layer_idx)

! Self-shading with explicit contribution from background OM concentration.
   extinction = extinction + (data%KeDOM*doc +data%KePOM*poc)


END SUBROUTINE aed2_light_extinction_organic_matter
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


!###############################################################################
PURE real(8) FUNCTION fpon_miner(use_oxy,Rpon_miner,Kpon_miner,theta_pon_miner,oxy,temp)
!-------------------------------------------------------------------------------
! Nitrogen
!
! Michaelis-Menten formulation for mineralisation
! Here, the classical Michaelis-Menten formulation for mineralisation
! is formulated.
!-------------------------------------------------------------------------------
!ARGUMENTS
   LOGICAL,INTENT(in) :: use_oxy
   real(8),INTENT(in) :: Rpon_miner,Kpon_miner,theta_pon_miner,oxy,temp
!
!-------------------------------------------------------------------------------
!BEGIN
   IF (use_oxy) THEN
      fpon_miner = Rpon_miner * oxy/(Kpon_miner+oxy) * (theta_pon_miner**(temp-20.0))
   ELSE
      fpon_miner = Rpon_miner * (theta_pon_miner**(temp-20.0))
   ENDIF

END FUNCTION fpon_miner
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


!###############################################################################
PURE real(8) FUNCTION fdon_miner(use_oxy,Rdon_miner,Kdon_miner,theta_don_miner,oxy,temp)
!-------------------------------------------------------------------------------
! Michaelis-Menten formulation for mineralisation added 18/7/11
!
! Here, the classical Michaelis-Menten formulation for mineralisation
! is formulated.
!-------------------------------------------------------------------------------
!ARGUMENTS
   LOGICAL,INTENT(in) :: use_oxy
   real(8),INTENT(in) :: Rdon_miner,Kdon_miner,theta_don_miner,oxy,temp
!
!-------------------------------------------------------------------------------
!BEGIN
   IF (use_oxy) THEN
      fdon_miner = Rdon_miner * oxy/(Kdon_miner+oxy) * (theta_don_miner**(temp-20.0))
   ELSE
      fdon_miner = Rdon_miner * (theta_don_miner**(temp-20.0))
   ENDIF

END FUNCTION fdon_miner
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



!###############################################################################
PURE real(8) FUNCTION fpop_miner(use_oxy,Rpop_miner,Kpop_miner,theta_pop_miner,oxy,temp)
!-------------------------------------------------------------------------------
! Phosphorus
!
! Michaelis-Menten formulation for mineralisation
!
! Here, the classical Michaelis-Menten formulation for mineralisation
! is formulated.
!-------------------------------------------------------------------------------
!ARGUMENTS
   LOGICAL,INTENT(in) :: use_oxy
   real(8),INTENT(in) :: Rpop_miner,Kpop_miner,theta_pop_miner,oxy,temp
!
!-------------------------------------------------------------------------------
!BEGIN
   IF (use_oxy) THEN
      fpop_miner = Rpop_miner * oxy/(Kpop_miner+oxy) * (theta_pop_miner**(temp-20.0))
   ELSE
      fpop_miner = Rpop_miner * (theta_pop_miner**(temp-20.0))
   ENDIF

END FUNCTION fpop_miner
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


!###############################################################################
PURE real(8) FUNCTION fdop_miner(use_oxy,Rdop_miner,Kdop_miner,theta_dop_miner,oxy,temp)
!-------------------------------------------------------------------------------
! Michaelis-Menten formulation for mineralisation added 18/7/11
!
! Here, the classical Michaelis-Menten formulation for mineralisation
! is formulated.
!-------------------------------------------------------------------------------
!ARGUMENTS
   LOGICAL,INTENT(in) :: use_oxy
   real(8),INTENT(in) :: Rdop_miner,Kdop_miner,theta_dop_miner,oxy,temp
!
!-------------------------------------------------------------------------------
!BEGIN
   IF (use_oxy) THEN
      fdop_miner = Rdop_miner * oxy/(Kdop_miner+oxy) * (theta_dop_miner**(temp-20.0))
   ELSE
      fdop_miner = Rdop_miner * (theta_dop_miner**(temp-20.0))
   ENDIF

END FUNCTION fdop_miner
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



!###############################################################################
PURE real(8) FUNCTION fpoc_miner(use_oxy,Rpoc_miner,Kpoc_miner,theta_poc_miner,oxy,temp)
!-------------------------------------------------------------------------------
! Carbon
!
! Michaelis-Menten formulation for mineralisation
!
! Here, the classical Michaelis-Menten formulation for mineralisation
! is formulated.
!-------------------------------------------------------------------------------
!ARGUMENTS
   LOGICAL,INTENT(in) :: use_oxy
   real(8),INTENT(in) :: Rpoc_miner,Kpoc_miner,theta_poc_miner,oxy,temp
!
!-------------------------------------------------------------------------------
!BEGIN
   IF (use_oxy) THEN
      fpoc_miner = Rpoc_miner * oxy/(Kpoc_miner+oxy) * (theta_poc_miner**(temp-20.0))
   ELSE
      fpoc_miner = Rpoc_miner * (theta_poc_miner**(temp-20.0))
   ENDIF

END FUNCTION fpoc_miner
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


!###############################################################################
PURE real(8) FUNCTION fdoc_miner(use_oxy,Rdoc_miner,Kdoc_miner,theta_doc_miner,oxy,temp)
!-------------------------------------------------------------------------------
! Michaelis-Menten formulation for mineralisation added 18/7/11
!
! Here, the classical Michaelis-Menten formulation for mineralisation
! is formulated.
!-------------------------------------------------------------------------------
!ARGUMENTS
   LOGICAL,INTENT(in) :: use_oxy
   real(8),INTENT(in) :: Rdoc_miner,Kdoc_miner,theta_doc_miner,oxy,temp
!
!-----------------------------------------------------------------------
!BEGIN
   IF (use_oxy) THEN
      fdoc_miner = Rdoc_miner * oxy/(Kdoc_miner+oxy) * (theta_doc_miner**(temp-20.0))
   ELSE
      fdoc_miner = Rdoc_miner * (theta_doc_miner**(temp-20.0))
   ENDIF

END FUNCTION fdoc_miner
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


END MODULE aed2_organic_matter
