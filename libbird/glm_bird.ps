/******************************************************************************
 *                                                                            *
 * glm_bird.c                                                                 *
 *                                                                            *
 * Bird and Hulstrom's Solar Irradiance Model                                 *
 * Richard E. Bird and Roland L. Hulstrom                                     *
 * A Simplified Clear Sky Model for Direct and Diffuse Insolation on          *
 *                                                       Horizontal Surfaces. *
 * SERI/TR-642-761                                                            *
 * Solar Energy Research Institute                                            *
 * Golden, Colorado, USA, February 1981.                                      *
 *                                                                            *
 * This code taken from : http://www.instesre.org/Solar/BirdModelNew.htm      *
 *                                                                            *
 * This text was also there, so probably we need mods :                       *
 *                                                                            *
 * This model is widely used for estimating broadband clear sky irradiance at *
 * Earth's surface. It is based on empirical representations of radiative     *
 * transfer equations and attempts to take into account the cumulative        *
 * effects of aerosols, water vapor, ozone and other gases, and Rayleigh      *
 * (molecular) scattering upon sunlight reaching Earth's surface. I have      *
 * substituted my own calculations for solar zenith angle and Earth-sun       *
 * distance for the calculations included in published versions of code for   *
 * the Bird model -- not because they are necessarily better, but because I   *
 * had already written the code. However, I have retained the original        *
 * calculation for relative air mass, which will be significantly different   *
 * from my own calculations only at solar zenith angles very close to 90deg.  *
 *                                                                            *
 ******************************************************************************/

#if 0
#include <math.h>

#include "glm.h"
#include "glm_types.h"
#include "aed_time.h"

static AED_REAL dr = Pi/180.;

// Just for now - until code is complete, then inline it
#define parseFloat(x) (x)

typedef struct _f_type_ {
     AED_REAL So;
     AED_REAL air_m;
     AED_REAL direct;
     AED_REAL diffuse;
     AED_REAL total;
     AED_REAL S_corrected;
} f_type;

// Calculate solar zenith angle from specified location and time
AED_REAL stationPressure(AED_REAL p, AED_REAL h) {
  AED_REAL H = h/1000.;
  return p * exp(-.119*H-.0013*H*H);
}


AED_REAL zenith() {
}


/*
AED_REAL getJD(M,D,Y,HR,MIN,SEC)
{
   AED_REAL m = parseFloat(M), d = parseFloat(D), y = parseFloat(Y);
   AED_REAL hour = parseFloat(HR), minute = parseFloat(MIN), second = parseFloat(SEC);
   if (m < 3) {
      y = y-1; m = m+12;
   }
   AED_REAL A = floor(y/100),B; B = 2-A+floor(A/4);
   AED_REAL JD = floor(365.25*(y+4716))+floor(30.6001*(m+1))+d+B-1524.5;
   return JD+hour/24.0+minute/1440.0+second/86400.0;
}
*/
AED_REAL get_julian_day(int m, int d, int y, int h, int min, int sec)
{
    AED_REAL jday = julian_day(y, m, d);
    return jday + h/24.0+min/1440.0+sec/86400.0;
}


AED_REAL getSolarPosition(AED_REAL JD, AED_REAL Lon, AED_REAL Lat)
{
    AED_REAL T = (JD-2451545.0)/36525.0;
    AED_REAL L0 = 280.46645+36000.76983*T+0.0003032*T*T;
    AED_REAL M = 357.52910+35999.05030*T-0.0001559*T*T-0.00000048*T*T*T;
    AED_REAL M_rad = M*dr;
    AED_REAL e = 0.016708617-0.000042037*T-0.0000001236*T*T;
    AED_REAL C = (1.914600-0.004817*T-0.000014*T*T)*sin(M_rad)
                        +(0.019993-0.000101*T)*sin(2.*M_rad)+0.000290*sin(3.*M_rad);

    AED_REAL L_save = (L0+C)/360.;
    if (L_save < 0.) L_true = (L0+C)-ceil(L_save)*360.;
    else L_true = (L0+C)-floor(L_save)*360.;
    if (L_true < 0.) L_true+ = 360.;
    AED_REAL f = M_rad+C*dr;
    F.R  = 1.000001018*(1.-e*e)/(1.+e*cos(f));

    // Sidereal time
    AED_REAL Sidereal_time = 280.46061837+360.98564736629*(JD-2451545.)+0.000387933*T*T
 	                        -T*T*T/38710000.;

    // Replacement code for Sidereal = fmod(Sidereal,360.)
    AED_REAL S_save = Sidereal_time/360.;
    if (S_save < 0.) Sidereal_time = Sidereal_time - ceil(S_save)*360.;
    else Sidereal_time = Sidereal_time - floor(S_save)*360.;

    if (Sidereal_time < 0.) Sidereal_time += 360.;

    // Obliquity
    AED_REAL Obliquity = 23.+26./60.+21.448/3600.-46.8150/3600.*T-0.00059/3600.*T*T
	                             +0.001813/3600.*T*T*T;
    AED_REAL Right_Ascension = atan2(sin(L_true*dr)*cos(Obliquity*dr),cos(L_true*dr));
    AED_REAL Declination = asin(sin(Obliquity*dr)*sin(L_true*dr));
    AED_REAL Hour_Angle = Sidereal_time+Lon-Right_Ascension/dr;
    AED_REAL Elevation = (asin(sin(Lat*dr)*sin(Declination)+cos(Lat*dr)*cos(Declination)*cos(Hour_Angle*dr)))/dr;
    return 90.-Elevation;
}


AED_REAL Bird(f_type f)
{
    AED_REAL Z = parseFloat(f.Z);

    // relative air mass
    AED_REAL AM = 1./(cos(Z*dr)+0.15*pow(93.885-Z,-1.25));
    AED_REAL AMp = AM*parseFloat(f.p)/1013.;

    // Rayleigh
    AED_REAL Tr = exp(-0.0903*pow(AMp,0.84)*(1+AMp-pow(AMp,1.01)));

    // ozone
    AED_REAL Ozm = parseFloat(f.O3)*AM;
    AED_REAL Toz = 1.-0.1611*Ozm*pow(1.+139.48*Ozm,-0.3035)-0.002715*Ozm/(1.+0.044*Ozm+0.0003*pow(Ozm,2.));

    // mixed gases
    AED_REAL Tm = exp(-0.0127*pow(AMp,0.26));

    // water vapor
    AED_REAL Wm = AM*parseFloat(f.H2O);
    AED_REAL Tw = 1.-2.4959*Wm/((1.+pow(79.034*Wm,0.6828))+6.385*Wm);

    // daily turbidity
    // AED_REAL Ta5 = A*sin((Dan-B)*PI/180.)+C; aerosol optical depth at 500 nm
    // AED_REAL Ta3 = Ta5+0.1;
    AED_REAL Ta5 = parseFloat(f.AOT500);
    AED_REAL Ta3 = parseFloat(f.AOT380);
    AED_REAL Tau = 0.2758*Ta3+0.35*Ta5;
    AED_REAL Ta = exp((-pow(Tau,0.873))*(1.+Tau-(pow(Tau,0.7088)))*pow(AM,0.9108));
    AED_REAL TAA = 1.-0.1*(1.-AM+pow(AM,1.06))*(1.-Ta);
    AED_REAL TAs = Ta/TAA;
    AED_REAL Rs = 0.0685+(1.-0.84)*(1.-TAs);

    // clear irradiance
    AED_REAL Io = parseFloat(f.So);

    // direct
    // Earth/sun distance correction, Rsq = 1/R^2
    //  AED_REAL d = parseFloat(f.doy);
    //  AED_REAL Rsq = (1.00011+0.034221*cos(6.28318*(d-1)/365)+0.00128*sin(6.28318*
    //                        (d-1)/365)+0.000719*cos(2*(6.28318*(d-1)/365))+0.000077*sin(2*(6.28318*(d-1)/365)));
    AED_REAL Rsq = 1./(parseFloat(f.R)*parseFloat(f.R));

    //alert("R= "+Rsq);
    AED_REAL Id = Rsq*Io*.9662*Tr*Toz*Tm*Tw*Ta;

    // direct on horizontal surface
    AED_REAL Idh = Id*cos(Z*dr);

    // diffuse (scattered)
    AED_REAL Ias = 0.79*Io*cos(Z*dr)*Toz*Tm*Tw*TAA;
  			Ias = Ias*(0.5*(1.-Tr)+0.85*(1.-TAs))/(1.-AM+pow(AM,1.02));
    // total dif + dir on horizontal
    AED_REAL Itot = (Idh+Ias)/(1.-parseFloat(f.albedo)*Rs);
    AED_REAL Idif = Itot-Idh;

    f.air_m = AM.toFixed(4);
    f.direct = Idh.toFixed(1);
    f.diffuse = Idif.toFixed(1);
    f.total = Itot.toFixed(1);
    f.S_corrected = (Rsq*Io).toFixed(1);
}

#if 0

Inputs:
----------------------------------------------------------------------------------------
Quantity                           Units                           Value
----------------------------------------------------------------------------------------
Mean (1 AU) solar constant         W/m2                    name="So"        value="1367"
Longitude                          degrees (West is "-")   name="lon"       value="-75"
Latitude                           degrees (North is "+")  name="lat"       value="40"
Elevation                          meters                  name="elevation" value="120"
Month                              1-12                    name="month"     value="6"
Day                                1-31                    name="day"       value="21"
Year                               20xx                    name="year"      value="2007"
Hour                               1-24 UT                 name="hour"      value="17"
Minute                             1-59                    name="minute"    value="0"
Second                             1-59                    name="second"    value="0"
Sealevel pressure                  millibars               name="pStation"  value="1012"
Surface albedo                     (dimensionless)         name="albedo"    value="0.2"
Total column ozone                 atm-cm                  name="O3"        value="0.3"
Total precipitable water vapor     cm H2O                  name="H2O"       value="1.5"
Aerosol optical depth @ 500 nm     (dimensionless)         name="AOT500"    value="0.10"
Aerosol optical depth @ 380 nm     (dimensionless)         name="AOT380"    value="0.15"
----------------------------------------------------------------------------------------

Click to calculate outputs...
	JD = getJD(month,day,year,hour,minute,second);
	p = stationPressure(pStation, elevation);
	Z = getSolarPosition(this.form);
	Bird(this.form);

Outputs:
----------------------------------------------------------------------------
Quantity                                  Units           Value
----------------------------------------------------------------------------
Julian Date                               Days            name="JD"
Station pressure                          mbar            name="p"
Earth/sun distance                        AU              name="R"
Solar zenith angle                        degrees         name="Z"
Relative air mass                         (dimensionless) name="air_m"
Distance-corrected solar constant         W/m2            name="S_corrected"
Direct irradiance on horizontal surface   W/m2            name="direct"
Diffuse irradiance                        W/m2            name="diffuse"
Total irradiance on horizontal surface    W/m2            name="total"
----------------------------------------------------------------------------

#endif
#endif
